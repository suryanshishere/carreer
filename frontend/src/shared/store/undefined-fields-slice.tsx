import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { IContributeInputForm } from "models/userModel/account/contributeToPost/IContributeInputForm";
import { ITableFormData } from "user/components/account/createForm/createFormHelper/interfaceHelper";

// Define the initial state for the slice
interface UndefinedFieldState {
  fields: string[];
  postFormData: IContributeInputForm[];
}

const initialState: UndefinedFieldState = {
  fields: [],
  postFormData: [], // Store for postFormData
};

// Create the Redux slice
const undefinedFieldSlice = createSlice({
  name: "undefinedFields",
  initialState,
  reducers: {
    // Reducer to set fields with a payload of string array
    setFields(state, action: PayloadAction<string[]>) {
      state.fields = action.payload;
      localStorage.setItem("fields", JSON.stringify(state.fields));
    },
    // Reducer to clear fields (reset to empty array)
    clearFields(state) {
      state.fields = [];
      localStorage.removeItem("fields");
    },
    // Reducer to set postFormData
    setPostformData(state, action: PayloadAction<IContributeInputForm[]>) {
      state.postFormData = action.payload;
      localStorage.setItem("postFormData", JSON.stringify(state.postFormData));
    },
    // Reducer to clear postFormData and tableFormData
    clearFormData(state) {
      state.postFormData = [];
      localStorage.removeItem("postFormData");
    },
    restoreState(state) {
      const storedFields = localStorage.getItem("fields");
      const storedPostformData = localStorage.getItem("postFormData");
      const storedTableFormData = localStorage.getItem("tableFormData");

      if (storedFields) state.fields = JSON.parse(storedFields);
      if (storedPostformData)
        state.postFormData = JSON.parse(storedPostformData);
    },
  },
});

// Export the actions generated by createSlice
export const undefinedFieldActions = undefinedFieldSlice.actions;

// Export the reducer to be used in the store configuration
export default undefinedFieldSlice.reducer;
