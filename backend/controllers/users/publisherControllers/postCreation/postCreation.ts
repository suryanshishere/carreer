import { NextFunction } from "express";
import { GoogleGenerativeAI } from "@google/generative-ai";
import resultPromptSchema from "./sectionPromptSchema/result-prompt-schema";
import admitCardPromptSchema from "./sectionPromptSchema/admit-card-prompt-schema";
import latestJobPromptSchema from "./sectionPromptSchema/latest-job-prompt-schema";
import syllabusPromptSchema from "./sectionPromptSchema/syllabus-prompt-schema";
import answerKeyPromptSchema from "./sectionPromptSchema/answer-key-prompt-schema";
import certificateVerificatePromptSchema from "./sectionPromptSchema/certificate-verificate-prompt-schema";
import importantPromptSchema from "./sectionPromptSchema/important-prompt-schema";
import admissionPromptSchema from "./sectionPromptSchema/admission-prompt-schema";
import HttpError from "@utils/http-errors";

interface ISectionPromptSchema {
  [key: string]: { [key: string]: any };
}

export const sectionPromptSchema: ISectionPromptSchema = {
  result: resultPromptSchema,
  admit_card: admitCardPromptSchema,
  latest_job: latestJobPromptSchema,
  syllabus: syllabusPromptSchema,
  answer_key: answerKeyPromptSchema,
  certificate_verification: certificateVerificatePromptSchema,
  important: importantPromptSchema,
  admission: admissionPromptSchema,
};

const postCreation = async (
  nameOfThePost: string,
  schema: { [key: string]: any },
  next: NextFunction
) => {
  try {
    // Validate the schema argument to ensure it's a valid object
    if (Object.keys(schema).length === 0) {
      return next(new HttpError("Schema cannot be empty", 400));
    }

    // Initialize Google Generative AI with the provided API key
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
    
    if (!process.env.GEMINI_API_KEY) {
      return next(new HttpError("Missing GEMINI API Key", 400));
    }

    // Configure the generative model with the given schema
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-pro",
      generationConfig: {
        responseMimeType: "application/json",
        responseSchema: schema,
      },
    });

    // Generate the content for the post
    const prompt = `Generate a comprehensive and engaging post for the "${nameOfThePost}"`;
    const result = await model.generateContent(prompt);

    // Ensure the result is in the correct format (JSON)
    const generatedContent = result.response.text();
    console.log("Generated content:", generatedContent);

    // Attempt to parse the generated content as JSON
    return parseGeneratedContent(generatedContent, next);

  } catch (error) {
    console.error("Error during post creation:", error);
    return next(new HttpError("An unexpected error occurred during post creation", 500));
  }
};

// Helper function to parse the generated content
const parseGeneratedContent = (content: string, next: NextFunction) => {
  try {
    const parsedContent = JSON.parse(content);
    return parsedContent;
  } catch (syntaxError) {
    console.error("JSON Syntax Error in generated content:", syntaxError);
    console.error("Generated content:", content);
    return next(new HttpError("Invalid JSON generated by AI", 500));
  }
};

export default postCreation;
